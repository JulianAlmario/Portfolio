---
import type { HeaderProps } from "../types/types.ts";
const {headerType} = Astro.props as {headerType:HeaderProps};


---

 <!-- Mobile Menu Button -->
    <button 
        id="menu-btn" 
        class="lg:hidden absolute right-4 top-4 text-azure-400 bg-midnight-700 brightness-100 rounded-4xl p-2"
        aria-label="Toggle menu"
    >
        <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="h-8 w-8" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
        >
            <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M4 6h16M4 12h16M4 18h16"
            />
        </svg>
    </button>

 <!-- Mobile Sidebar -->
    <nav id="mobile-menu" class="fixed lg:hidden right-0 top-0 w-64 h-full bg-midnight-950 transform translate-x-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-4">
            <button 
                id="close-menu" 
                class="absolute left-4 top-4 text-azure-400 hover:text-azure-300"
                aria-label="Close menu"
            >
                <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    class="h-8 w-8" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                >
                    <path 
                        stroke-linecap="round" 
                        stroke-linejoin="round" 
                        stroke-width="2" 
                        d="M6 18L18 6M6 6l12 12"
                    />
                </svg>
            </button>
            <div class="mt-16 flex flex-col gap-4">
                {headerType.map((item) => (
                    <a
                        href={item.url}
                        class="text-shadow-lg/20 text-shadow-azure-500 text-xl text-azure-400 hover:text-azure-300 transition duration-100 px-3 py-2 rounded-md font-medium block"
                    >
                        {item.title}
                    </a>
                ))}
            </div>
        </div>
    </nav>


<script>
    const menuBtn = document.getElementById('menu-btn');
    const closeBtn = document.getElementById('close-menu');
    const mobileMenu = document.getElementById('mobile-menu');

    menuBtn?.addEventListener('click', () => {
        mobileMenu?.classList.remove('translate-x-full');
    });

    closeBtn?.addEventListener('click', () => {
        mobileMenu?.classList.add('translate-x-full');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (!target.closest('#mobile-menu') && !target.closest('#menu-btn')) {
            mobileMenu?.classList.add('translate-x-full');
        }
    });
</script>